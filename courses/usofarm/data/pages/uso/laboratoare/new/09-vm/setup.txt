===== Înainte de laborator =====

==== Comenzi și fișiere folosite în laborator ====

^ Comandă/fișier ^ Rol ^
| ''ping'' | verificarea conectivității până la o altă stație |
| ''vboxmanage'' | suită de comenzi oferită de VirtualBox pentru gestiunea mașinilor virtuale din CLI |
| ''qemu'' | emulator pentru rularea unui sistem de operare care nu se potrivește pe arhitectura sistemului nostru |
| ''docker'' | mecanism de containerizare, pentru detalii puteți citi mai multe [[https://opensource.com/resources/what-docker|aici]] |

==== Obiective ====

  * Să înțeleagă ce înseamnă virtualizare
  * Care sunt cazuri de utilizare (use case-uri) pentru virtualizare: pentru utilizator și pentru organizații
  * Să facă diferența dintre virtualizare și emulare
  * Să folosească interfața OpenStack oferită de cluster-ul facultății noastre
  * Să dobândească abilități de configurare pentru interacțiune eficientă cu o mașină virtuală: shared clipboard, SSH, configurare VBoxAdditions/OpeVMTools
  * Să ruleze o aplicație izolată sau să facă deploy rapid unei aplicații folosind containerizare (ex. Docker)

==== Resurse Git ====

Resursele laboratorulului de USO se găsesc în [[https://github.com/systems-cs-pub-ro/uso|acest repository Git]].

În laboratorul curent, pe mașina virtuală furnizată, aveți deja clonat repository-ul Git în directorul ''~/uso.git/''. Pe parcursul laboratorului vom folosi fișierele de suport de acolo.

<note important>
Pentru a pregăti infrastructura de laborator rulați comenzile de mai jos într-un terminal deschis în mașina virtuală. Deschideți un terminal folosind combinația de taste ''Ctrl+Alt+t''.

În listarea de mai jos ''student@uso:~$'' este promptul unde introduceți comenzile, pe acela nu-l tastați. Recomandăm să **nu** folosiți //copy-paste// ca să vă acomodați cu linia de comandă. Nu vă bateți capul cu ce fac comenzile de mai jos, pe moment le rulăm mecanic, doar să ne facem treaba. Cei curioși pot consulta documentația Git.
<code>
student@uso:~$ cd uso.git/
student@uso:~/uso.git$ git rm --cached -r .
student@uso:~/uso.git$ git reset --hard
student@uso:~/uso.git$ git clean -f -d
student@uso:~/uso.git$ git fetch origin
student@uso:~/uso.git$ git checkout -b lab-09-vm
student@uso:~/uso.git$ git rebase origin/lab-09-vm
</code>

Dacă la a cincea comandă rulată (''git checkout -b lab-09-vm'') primiți o eroare de forma ''fatal: A branch named 'lab-09-vm' already exists.'', nu vă îngrijorați, nu e nici o problemă.
</note>

<hidden>
În cazul în care aveți probleme cu proiectorul, puteți folosi [[https://tmate.io/|tmate]] pentru a face un screen-cast al terminalului vostru.

Puteți folosi package managerul pentru a-l instala. De ex. pe **Ubuntu** puteți folosi ''sudo apt-get install tmate''.

Odată instalat, rulați comanda ''tmate''. Vi se va deschide o fereastră ''tmux'' la care se pot conecta studenții, pentru a urmării **demo-ul**.
În cadrul acesteia, rulați comanda ''tmate show-messages''.

<code>
$ tmate show-messages
Fri Nov 23 15:36:25 2018 [tmate] Connecting to master.tmate.io...
Fri Nov 23 15:36:26 2018 Reloaded!
Fri Nov 23 15:36:26 2018 Reloaded!
Fri Nov 23 15:36:26 2018 [tmate] Note: clear your terminal before sharing readonly access
Fri Nov 23 15:36:26 2018 [tmate] web session read only: https://tmate.io/t/ro-5BXhC0r93ra5crftnwIc9Y1Fg
Fri Nov 23 15:36:26 2018 [tmate] ssh session read only: ssh ro-5BXhC0r93ra5crftnwIc9Y1Fg@am2.tmate.io
Fri Nov 23 15:36:26 2018 [tmate] web session: https://tmate.io/t/HvrzBkAV1vdGzndMsxFVgEexT
Fri Nov 23 15:36:26 2018 [tmate] ssh session: ssh HvrzBkAV1vdGzndMsxFVgEexT@am2.tmate.io
Fri Nov 23 15:36:46 2018 [tmate] Your tmate client can be upgraded to 2.2.1
</code>

Din rezultatul comenzii de mai sus, ne interesează sesiunea de **ssh read only**
<code>
Fri Nov 23 15:36:26 2018 [tmate] ssh session read only: ssh ro-5BXhC0r93ra5crftnwIc9Y1Fg@am2.tmate.io
</code>

Folsind ''ssh ro-5BXhC0r93ra5crftnwIc9Y1Fg@am2.tmate.io'' studenții se vor conecta, read-only, "la" terminalul vostru.

</hidden>